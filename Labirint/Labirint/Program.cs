namespace Labirint
{
    internal class Program
    {
        static void Main(string[] args)
        {
            char[,] map = new[,]
            {
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
                {'#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ','#'},
                {'#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ','#'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
            };

            ConsoleRenderer renderer = new ConsoleRenderer();
            SetMapPixels(map, renderer);
            Player player = new Player(1, 1, renderer, map);
            VerticalObstacle obstacle = new VerticalObstacle(2, 5, '!', renderer, map);
            SmartEnemy enemy = new SmartEnemy(16, 8, '$', renderer, map, player);

            Units units = new Units();
            units.Add(player);
            units.Add(obstacle);
            units.Add(enemy);

            renderer.Render();

            while (true)
            {
                foreach (Unit unit in units)
                {
                    unit.Update();
                }

                renderer.Render();

                Thread.Sleep(400);

                foreach (Unit unit in units)
                {
                    if (unit == player)
                        continue;

                    if ((player.X == obstacle.X && player.Y == obstacle.Y) ||
                            (player.X == enemy.X && player.Y == enemy.Y))
                    {
                        GameOver();
                    }
                }
            }
        }

        static void GameOver()
        {
            Environment.Exit(0);
        }

        static void SetMapPixels(char[,] map, ConsoleRenderer renderer)
        {
            for (int y = 0; y < map.GetLength(0); y++)
            {
                for (int x = 0; x < map.GetLength(1); x++)
                {
                    renderer.SetPixel(x, y, map[y, x]);
                }
            }
        }
    }
}
